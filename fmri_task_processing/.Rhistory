rp = read.table(file = rpfile, header = FALSE)
print("rfmri.nii")
print("fmri.mat")
mean_niftix = nifti(mean_nifti)
x = cal_img(x)
x@.Data <- aperm(x, c(2, 3, 1))
col = gray(0:64/64)
zlim <- c(x@cal_min, x@cal_max)
breaks <- c(zlim[1],
seq(min(zlim, na.rm = TRUE),
max(zlim,
na.rm = TRUE),
length = length(col) - 1), zlim[2])
dims = dim(x)
X <- nrow(x)
Y <- ncol(x)
z = 48
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(1,1), mar = rep(0, 4),
bg = "black")
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
x = nifti(mean_nifti)
x = cal_img(x)
x@.Data <- aperm(x, c(2, 3, 1))
col = gray(0:64/64)
zlim <- c(x@cal_min, x@cal_max)
breaks <- c(zlim[1],
seq(min(zlim, na.rm = TRUE),
max(zlim,
na.rm = TRUE),
length = length(col) - 1), zlim[2])
dims = dim(x)
X <- nrow(x)
Y <- ncol(x)
z = 48
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(1,1), mar = rep(0, 4),
bg = "black")
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = 60, col = "red")
oldpar$oma
opar$oma
par()$oma
knitr::opts_chunk$set(echo = FALSE, prompt = FALSE, message = FALSE, warning = FALSE, comment = "", results = 'hide')
library(pander)
library(rvest)
library(httr)
library(neurobase)
library(matlabr)
library(spm12r)
library(tidyr)
library(ggplot2)
t1_fname = "anat.nii.gz"
# reading in the mean image
mean_img = "meanfmri.nii.gz"
mean_nifti = readnii(mean_img)
rpfile = "rp_fmri.txt"
rp = read.table(file = rpfile, header = FALSE)
print("rfmri.nii")
print("fmri.mat")
x = nifti(mean_nifti)
x = cal_img(x)
x@.Data <- aperm(x, c(2, 3, 1))
col = gray(0:64/64)
zlim <- c(x@cal_min, x@cal_max)
breaks <- c(zlim[1],
seq(min(zlim, na.rm = TRUE),
max(zlim,
na.rm = TRUE),
length = length(col) - 1), zlim[2])
dims = dim(x)
X <- nrow(x)
Y <- ncol(x)
z = 48
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(1,1), mar = rep(0, 4),
bg = "black")
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = 1)
abline(h = 1, col = "red'")
abline(h = 1, col = "red")
abline(h = 2, col = "red")
abline(h = 3, col = "red")
slice_order = c(
1740, 1680, 1620, 1560, 1500, 1440, 1380,
1320, 1260, 1200, 1140, 1080, 1020, 960,
900, 840, 780, 720, 660, 600, 540, 480,
420, 360, 300, 240, 180, 120, 60, 0,
1740, 1680, 1620, 1560, 1500, 1440, 1380,
1320, 1260, 1200, 1140, 1080, 1020, 960,
900, 840, 780, 720, 660, 600, 540, 480, 420,
360, 300, 240, 180, 120, 60, 0)
ref_slice = 900
ta = 0 # since slice_order in ms
times = slice_order/1000
df = data.frame(time = times, slice = seq(times))
df = dplyr::arrange(df, time)
plot(x = df$time, y = df$slice, pch = 19, type = "n", xlim = c(0, 1.8))
segments(x0 = df$time, y0 = df$slice, x1 = df$time + 0.25)
x = nifti(mean_nifti)
x = cal_img(x)
x@.Data <- aperm(x, c(2, 3, 1))
col = gray(0:64/64)
zlim <- c(x@cal_min, x@cal_max)
breaks <- c(zlim[1],
seq(min(zlim, na.rm = TRUE),
max(zlim,
na.rm = TRUE),
length = length(col) - 1), zlim[2])
dims = dim(x)
X <- nrow(x)
Y <- ncol(x)
z = 48
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(1,1), mar = rep(0, 4),
bg = "black")
splits = split(df, df$time)
splits
splits = split(df, df$time)
?animation::saveGIF
splits = splits[1:5]
animation::saveGIF({
for ( i in seq_along(splits)) {
idf = splits[[idf]]
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
}
}, movie.name = "slice_timing.gif")
animation::saveGIF({
for ( i in seq_along(splits)) {
idf = splits[[i]]
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
}
}, movie.name = "slice_timing.gif")
for ( i in seq_along(splits)) {
idf = splits[[i]]
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
}
df
times
times = slice_order/1000
df = data.frame(time = times, slice = seq(times))
df = dplyr::arrange(df, time)
plot(x = df$time, y = df$slice, pch = 19, type = "n", xlim = c(0, 1.8))
segments(x0 = df$time, y0 = df$slice, x1 = df$time + 0.25)
x = nifti(mean_nifti)
x = cal_img(x)
x@.Data <- aperm(x, c(2, 3, 1))
col = gray(0:64/64)
zlim <- c(x@cal_min, x@cal_max)
breaks <- c(zlim[1],
seq(min(zlim, na.rm = TRUE),
max(zlim,
na.rm = TRUE),
length = length(col) - 1), zlim[2])
dims = dim(x)
X <- nrow(x)
Y <- ncol(x)
z = 48
oldpar <- par(no.readonly = TRUE)
df
# need 60 - because how image works and it's ascending. 60 is bottom
df = data.frame(time = times, slice = 60 - seq(times))
df = dplyr::arrange(df, time)
plot(x = df$time, y = df$slice, pch = 19, type = "n", xlim = c(0, 1.8))
segments(x0 = df$time, y0 = df$slice, x1 = df$time + 0.25)
x = nifti(mean_nifti)
x = cal_img(x)
x@.Data <- aperm(x, c(2, 3, 1))
col = gray(0:64/64)
zlim <- c(x@cal_min, x@cal_max)
breaks <- c(zlim[1],
seq(min(zlim, na.rm = TRUE),
max(zlim,
na.rm = TRUE),
length = length(col) - 1), zlim[2])
dims = dim(x)
X <- nrow(x)
Y <- ncol(x)
z = 48
oldpar <- par(no.readonly = TRUE)
splits = split(df, df$time)
animation::saveGIF({
par(mfrow = c(1,1), mar = rep(0, 4),
bg = "black")
for (i in seq_along(splits)) {
idf = splits[[i]]
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
}
}, movie.name = "slice_timing.gif")
for (i in seq_along(splits)) {
idf = splits[[i]]
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
}
for (i in seq_along(splits)) {
idf = splits[[i]]
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
}
unlink('index_cache', recursive = TRUE)
times = slice_order/1000
# need 60 - because how image works and it's ascending. 60 is bottom
df = data.frame(time = times, slice = 60 - seq(times))
df = dplyr::arrange(df, time)
plot(x = df$time, y = df$slice, pch = 19, type = "n", xlim = c(0, 1.8))
segments(x0 = df$time, y0 = df$slice, x1 = df$time + 0.25)
x = nifti(mean_nifti)
x = cal_img(x)
x@.Data <- aperm(x, c(2, 3, 1))
col = gray(0:64/64)
zlim <- c(x@cal_min, x@cal_max)
breaks <- c(zlim[1],
seq(min(zlim, na.rm = TRUE),
max(zlim,
na.rm = TRUE),
length = length(col) - 1), zlim[2])
dims = dim(x)
X <- nrow(x)
Y <- ncol(x)
z = 48
splits = split(df, df$time)
oldpar <- par(no.readonly = TRUE)
dev.off()
for (i in seq_along(splits)) {
idf = splits[[i]]
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
}
animation::saveGIF({
par(mfrow = c(1,1), mar = rep(0, 4),
bg = "black")
for (i in seq_along(splits)) {
idf = splits[[i]]
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
}
}, movie.name = "slice_timing.gif")
dir()
system("open .")
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
X
Y
idf
text(x = 20, y = 80, labels = paste0("Time = ", time_slice, "s"), cex = 2)
idf = splits[[i]]
time_slice = unique(idf$time)
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
text(x = 20, y = 80, labels = paste0("Time = ", time_slice, "s"), cex = 2)
text(x = 20, y = 40, labels = paste0("Time = ", time_slice, "s"), cex = 2)
idf = splits[[i]]
time_slice = unique(idf$time)
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
text(x = 20, y = 40,
labels = paste0("Time = ", time_slice, "s"),
cex = 2)
idf = splits[[i]]
time_slice = unique(idf$time)
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
text(x = 20, y = 40,
labels = paste0("Time = ", time_slice, "s"),
cex = 1.5, col = "white")
idf = splits[[i]]
time_slice = unique(idf$time)
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
text(x = 20, y = 50,
labels = paste0("Time = ", time_slice, "s"),
cex = 1, col = "white")
idf = splits[[i]]
time_slice = unique(idf$time)
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
text(x = 10, y = 50,
labels = paste0("Time = ", time_slice, "s"),
cex = 1.2, col = "white")
idf = splits[[i]]
time_slice = unique(idf$time)
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
text(x = 14, y = 50,
labels = paste0("Time = ", time_slice, "s"),
cex = 1.2, col = "white")
animation::saveGIF({
par(mfrow = c(1,1), mar = rep(0, 4),
bg = "black")
for (i in seq_along(splits)) {
idf = splits[[i]]
time_slice = unique(idf$time)
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
text(x = 14, y = 50,
labels = paste0("Time = ", time_slice, "s"),
cex = 1.2, col = "white")
}
}, movie.name = "slice_timing.gif")
?saveGIF
animation::saveGIF({
par(mfrow = c(1,1), mar = rep(0, 4),
bg = "black")
for (i in seq_along(splits)) {
idf = splits[[i]]
time_slice = unique(idf$time)
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
text(x = 14, y = 50,
labels = paste0("Time = ", time_slice, "s"),
cex = 1.2, col = "white")
}
}, movie.name = "slice_timing.gif", interval = 0.5)
length(ids)
length(idf)
length(splits)
1.8/length(splits)
animation::saveGIF({
par(mfrow = c(1,1), mar = rep(0, 4),
bg = "black")
for (i in seq_along(splits)) {
idf = splits[[i]]
time_slice = unique(idf$time)
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
text(x = 14, y = 50,
labels = paste0("Time = ", time_slice, "s"),
cex = 1.2, col = "white")
}
}, movie.name = "slice_timing.gif", interval = 1.8/length(splits))
idf
df
splits
900/1000
slice[[as.cahracter(900/1000)]]
slice[[as.character(900/1000)]]
splits[[as.character(900/1000)]]
splits[[as.character(ref_slice/1000)]]
ref_df = splits[[as.character(ref_slice/1000)]]
oldpar <- par(no.readonly = TRUE)
animation::saveGIF({
par(mfrow = c(1,1), mar = rep(0, 4),
bg = "black")
for (i in seq_along(splits)) {
idf = splits[[i]]
time_slice = unique(idf$time)
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
abline(h = ref_df$slice, col = "blue", lwd = 5)
text(x = 14, y = 50,
labels = paste0("Time = ", time_slice, "s"),
cex = 1.2, col = "white")
}
}, movie.name = "slice_timing.gif", interval = 1.8/length(splits))
expr = {
par(mfrow = c(1,1), mar = rep(0, 4),
bg = "black")
for (i in seq_along(splits)) {
idf = splits[[i]]
time_slice = unique(idf$time)
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
abline(h = ref_df$slice, col = "blue", lwd = 5)
text(x = 14, y = 50,
labels = paste0("Time = ", time_slice, "s"),
cex = 1.2, col = "white")
}
animation::saveGIF({
par(mfrow = c(1,1), mar = rep(0, 4),
bg = "black")
for (i in seq_along(splits)) {
idf = splits[[i]]
time_slice = unique(idf$time)
graphics::image(1:X, 1:Y, x[, , z], col = col,
breaks = breaks, bg = "black")
abline(h = idf$slice, col = "red", lwd = 5)
abline(h = ref_df$slice, col = "blue", lwd = 5)
text(x = 14, y = 50,
labels = paste0("Time = ", time_slice, "s"),
cex = 1.2, col = "white")
}
}, movie.name = "slice_timing_slow.gif",
interval = 1.8/length(splits) *2)
spm_probs_to_seg
probs = paste0("c", 1:6, "anat.nii.gz")
probs = check_nifti(probs)
hard_seg = spm_probs_to_seg(img = probs)
anat = readnii("anat.nii.gz")
ortho2(anat, hard_seg)
ortho2(hard_seg)
dev.off()
ortho2(hard_seg)
hard_seg = mask_img(hard_seg, hard_seg >= 1 & hard_seg <= 3)
ortho2(hard_seg)
probs = paste0("c", 1:6, "anat.nii.gz")
probs = check_nifti(probs)
hard_seg = spm_probs_to_seg(img = probs)
anat = readnii("anat.nii.gz")
hard_seg = mask_img(hard_seg, hard_seg >= 1 & hard_seg <= 3)
double_ortho(anat, hard_seg)
rm(list = c("hard_seg", "anat"));
library(fmri)
?adimpro
help(package = "adimpro")
norm = readnii("warfmri_mean.nii.gz")
ortho2(norm)
dim(norm)
seg = list(deformation = "y_anat.nii.gz")
seg = list(deformation = "y_anat.nii.gz", bias_corrected = "manat.nii.gz")
bounding_box = matrix(
c(-78, -112, -70,
78, 76, 85), nrow = 2,
byrow = TRUE)
anat_norm = spm12_normalize_write(
deformation = seg$deformation,
other.files = seg$bias_corrected,
bounding_box = bounding_box,
interp = "bspline5",
voxel_size = c(1, 1, 1)
)
anat_norm2x2x2 = spm12_normalize_write(
deformation = seg$deformation,
other.files = seg$bias_corrected,
bounding_box = bounding_box,
interp = "bspline5",
voxel_size = c(2, 2, 2) # note the resolution!!!
)
anat_norm2x2x2
file.copy(anat_norm2x2x2$outfiles, "wmanat_2x2x2.nii")
gzip("wmanat_2x2x2.nii", compression = 9)
library(R.utils)
gzip("wmanat_2x2x2.nii", compression = 9)
spm12_normalize_write
?spm12_normalize_write
img = readNifti("s5warfmri.nii.gz")
mn = apply(img, 1:3, mean)
dim(mn)
class(mn)
dim(mn)
class(mn)
library(RNifti)
img = readNifti("s5warfmri.nii.gz")
mn = apply(img, 1:3, mean)
dim(mn)
class(mn)
dim(mn)
class(mn)
mn_img = updateNifti(image = mn, template = dumpNifti(img))
writeNifti(mn_img, file = "s5warfmri_mean.nii.gz")
cons = list.files(pattern = "beta.*[.]nii")
cons
?theme
times = slice_order/1000
# need 60 - because how image works and it's ascending. 60 is bottom
df = data.frame(time = times, slice = 60 - seq(times))
df = dplyr::arrange(df, time)
# plot(x = df$time, y = df$slice, pch = 19, type = "n", xlim = c(0, 1.8))
# segments(x0 = df$time, y0 = df$slice, x1 = df$time + 0.25)
x = nifti(mean_nifti)
x = cal_img(x)
x@.Data <- aperm(x, c(2, 3, 1))
col = gray(0:64/64)
zlim <- c(x@cal_min, x@cal_max)
breaks <- c(zlim[1],
seq(min(zlim, na.rm = TRUE),
max(zlim,
na.rm = TRUE),
length = length(col) - 1), zlim[2])
dims = dim(x)
X <- nrow(x)
Y <- ncol(x)
z = 48
splits = split(df, df$time)
ref_df = splits[[as.character(ref_slice/1000)]]
oldpar <- par(no.readonly = TRUE)
splits
dir()
spmt = readnii("spmT_0001.nii")
ortho2(anat_norm2x2x2, spmt)
anat_norm2x2x2
anat_norm2x2x2 = readnii("wmanat_2x2x2.nii.gz")
ortho2(anat_norm2x2x2, spmt)
ortho2(norm, spmt)
norm
ortho2(norm, spmt)
ortho2(norm, spmt > 5)
